


ARM Macro Assembler    Page 1 


    1 00000000         ; constants
    2 00000000                 AREA             |MY CONSTANT|, DATA, READONLY
    3 00000000                 ALIGN            4
    4 00000000 00000026 
                       X_      DCD              0x26
    5 00000004 00000006 
                       Y_      DCD              0x06
    6 00000008 00000009 
                       Z_      DCD              0x09
    7 0000000C         
    8 0000000C 00000044 
                       A_      DCD              0x44
    9 00000010 00000012 
                       B_      DCD              0x12
   10 00000014 00000013 
                       C_      DCD              0x13
   11 00000018 000000C1 
                       D_      DCD              0xC1
   12 0000001C 00000034 
                       const1_ EQU              0x34
   13 0000001C FFFFFFFF 
                       NOT_    DCD              0xFFFFFFFF
   14 00000020         
   15 00000020         ; output
   16 00000020                 AREA             |MY DATA|, DATA, READWRITE
   17 00000000                 ALIGN            4
   18 00000000         
   19 00000000 00000000 
                       Q1_     DCD              0           ; arithmetic result
                                                            
   20 00000004 00000000 
                       Q2_     DCD              0           ; boolean result
   21 00000008         
   22 00000008         ; stack
   23 00000008 00000400 
                       Stack_Size
                               EQU              0x00000400  ; 1 kB
   24 00000008         
   25 00000008                 AREA             STACK, NOINIT, READWRITE, ALIGN
=4
   26 00000000         
   27 00000000         Stack_Mem
                               SPACE            Stack_Size
   28 00000400         __initial_sp
   29 00000400         
   30 00000400         ; vector table
   31 00000400                 AREA             RESET, DATA, READONLY
   32 00000000                 EXPORT           __Vectors
   33 00000000                 EXPORT           Reset_Handler [WEAK]
   34 00000000         __Vectors
   35 00000000 00000000        DCD              __initial_sp ; top of the stack
                                                            
   36 00000004 00000000        DCD              Reset_Handler ; reset handler
   37 00000008         __Vectors_End
   38 00000008         
   39 00000008         
   40 00000008         ; code area
   41 00000008                 AREA             |.text| , CODE
   42 00000000         



ARM Macro Assembler    Page 2 


   43 00000000         Reset_Handler
                               PROC
   44 00000000 4820            ldr              R0, =__main
   45 00000002 4700            bx               R0
   46 00000004                 ENDP
   47 00000004         
   48 00000004         __main  PROC
   49 00000004         
   50 00000004 4820            LDR              R0, = X_
   51 00000006 6801            LDR              R1, [R0]
   52 00000008         
   53 00000008 4820            LDR              R0, = Y_
   54 0000000A 6802            LDR              R2, [R0]
   55 0000000C         
   56 0000000C 4820            LDR              R0, = Z_
   57 0000000E 6803            LDR              R3, [R0]
   58 00000010         
   59 00000010         
   60 00000010         
   61 00000010 EB01 0002       add              R0, R1, R2  ; ( Y + X ) --> R4 
                                                            
   62 00000014         ;push {R0}
   63 00000014 6804            LDR              R4, [R0]
   64 00000016         
   65 00000016         
   66 00000016 EBA3 0002       sub              R0, R3, R2  ; ( Z - Y ) --> R5
   67 0000001A         ;pop {R4}
   68 0000001A 6805            LDR              R5, [R0]
   69 0000001C         
   70 0000001C         
   71 0000001C EB01 0003       add              R0, R1, R3  ; ( X + Z ) --> R6 
                                                               
   72 00000020 6806            LDR              R6, [R0]
   73 00000022         
   74 00000022         
   75 00000022 EB04 0005       add              R0, R4, R5  ; (Y + X) + (Z - Y)
                                                            
   76 00000026         
   77 00000026 4430            add              R0, R0, R6  ; (Y + X) + (Z - Y)
                                                             + ( X + Z) = Q  
   78 00000028         ; result
   79 00000028 481A            LDR              R0, = Q1_
   80 0000002A 6000            STR              R0, [R0]
   81 0000002C         
   82 0000002C         
   83 0000002C         ; send constants and varies to registers 
   84 0000002C         
   85 0000002C 481A            LDR              R0, = A_
   86 0000002E 6807            LDR              R7, [R0]
   87 00000030         
   88 00000030 481A            LDR              R0, = B_
   89 00000032 F8D0 8000       LDR              R8, [R0]
   90 00000036         
   91 00000036 481A            LDR              R0, = C_
   92 00000038 F8D0 9000       LDR              R9, [R0]
   93 0000003C         
   94 0000003C 4819            LDR              R0, = D_
   95 0000003E F8D0 A000       LDR              R10, [R0]
   96 00000042         



ARM Macro Assembler    Page 3 


   97 00000042 F04F 0034       LDR              R0, = const1_
   98 00000046 F8D0 B000       LDR              R11, [R0]
   99 0000004A         
  100 0000004A 4817            LDR              R0, = NOT_
  101 0000004C F8D0 C000       LDR              R12, [R0]
  102 00000050         
  103 00000050         ; (0x34 + !A*B*C & D)*!(A*!D*C) 
  104 00000050         
  105 00000050 EA87 000C       EOR              R0, R7, R12 ; !A
  106 00000054 6806            LDR              R6, [R0]
  107 00000056         ;push {R0}
  108 00000056         ;pop {R13}
  109 00000056         
  110 00000056         
  111 00000056 EA8A 000C       EOR              R0, R10, R12 ; !D
  112 0000005A 6806            LDR              R6, [R0]
  113 0000005C         
  114 0000005C         
  115 0000005C EA08 0006       AND              R0, R8, R6  ; !AB
  116 00000060 EA00 0009       AND              R0, R0, R9  ; !ABC
  117 00000064 6805            LDR              R5, [R0]
  118 00000066         
  119 00000066 EA06 0607       AND              R6, R6, R7  ; A*!D   
  120 0000006A EA06 0609       AND              R6, R6, R9  ; A*!D*C
  121 0000006E         
  122 0000006E EA86 060C       EOR              R6, R6, R12 ;!(A*!D*C)
  123 00000072         
  124 00000072 EA8A 0005       EOR              R0, R10, R5 ; !ABC & D 
  125 00000076         
  126 00000076 EA40 000B       ORR              R0, R0, R11 ; 0x34 + !A*B*C & D
                                                            
  127 0000007A         
  128 0000007A EA00 0006       AND              R0, R0, R6  ;(0x34 + !A*B*C & D
                                                            )*!(A*!D*C)
  129 0000007E         
  130 0000007E         
  131 0000007E         ; store the result
  132 0000007E 480B            LDR              R0, = Q2_
  133 00000080 6000            STR              R0, [R0]
  134 00000082         
  135 00000082         __mainloop
  136 00000082         ; place you application code here
  137 00000082 E7FE            B                __mainloop
  138 00000084                 ENDP
  139 00000084         
  140 00000084                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\lab1.d -o.\lab1.o -IC:\Users\Lenovo\Keil\Keil\STM32F4xx_DF



ARM Macro Assembler    Page 4 


P\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__EVAL SETA 1" 
--predefine="__UVISION_VERSION SETA 534" --predefine="STM32F407xx SETA 1" --lis
t=.\lab1.lst lab1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

A_ 0000000C

Symbol: A_
   Definitions
      At line 8 in file lab1.s
   Uses
      At line 85 in file lab1.s
Comment: A_ used once
B_ 00000010

Symbol: B_
   Definitions
      At line 9 in file lab1.s
   Uses
      At line 88 in file lab1.s
Comment: B_ used once
C_ 00000014

Symbol: C_
   Definitions
      At line 10 in file lab1.s
   Uses
      At line 91 in file lab1.s
Comment: C_ used once
D_ 00000018

Symbol: D_
   Definitions
      At line 11 in file lab1.s
   Uses
      At line 94 in file lab1.s
Comment: D_ used once
MY CONSTANT 00000000

Symbol: MY CONSTANT
   Definitions
      At line 2 in file lab1.s
   Uses
      None
Comment: MY CONSTANT unused
NOT_ 0000001C

Symbol: NOT_
   Definitions
      At line 13 in file lab1.s
   Uses
      At line 100 in file lab1.s
Comment: NOT_ used once
X_ 00000000

Symbol: X_
   Definitions
      At line 4 in file lab1.s
   Uses
      At line 50 in file lab1.s
Comment: X_ used once
Y_ 00000004

Symbol: Y_



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 5 in file lab1.s
   Uses
      At line 53 in file lab1.s
Comment: Y_ used once
Z_ 00000008

Symbol: Z_
   Definitions
      At line 6 in file lab1.s
   Uses
      At line 56 in file lab1.s
Comment: Z_ used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MY DATA 00000000

Symbol: MY DATA
   Definitions
      At line 16 in file lab1.s
   Uses
      None
Comment: MY DATA unused
Q1_ 00000000

Symbol: Q1_
   Definitions
      At line 19 in file lab1.s
   Uses
      At line 79 in file lab1.s
Comment: Q1_ used once
Q2_ 00000004

Symbol: Q2_
   Definitions
      At line 20 in file lab1.s
   Uses
      At line 132 in file lab1.s
Comment: Q2_ used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 25 in file lab1.s
   Uses
      None
Comment: STACK unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 27 in file lab1.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000400

Symbol: __initial_sp
   Definitions
      At line 28 in file lab1.s
   Uses
      At line 35 in file lab1.s
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 31 in file lab1.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 34 in file lab1.s
   Uses
      At line 32 in file lab1.s
Comment: __Vectors used once
__Vectors_End 00000008

Symbol: __Vectors_End
   Definitions
      At line 37 in file lab1.s
   Uses
      None
Comment: __Vectors_End unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 41 in file lab1.s
   Uses
      None
Comment: .text unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 43 in file lab1.s
   Uses
      At line 33 in file lab1.s
      At line 36 in file lab1.s

__main 00000004

Symbol: __main
   Definitions
      At line 48 in file lab1.s
   Uses
      At line 44 in file lab1.s
Comment: __main used once
__mainloop 00000082

Symbol: __mainloop
   Definitions
      At line 135 in file lab1.s
   Uses
      At line 137 in file lab1.s
Comment: __mainloop used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Stack_Size 00000400

Symbol: Stack_Size
   Definitions
      At line 23 in file lab1.s
   Uses
      At line 27 in file lab1.s
Comment: Stack_Size used once
const1_ 00000034

Symbol: const1_
   Definitions
      At line 12 in file lab1.s
   Uses
      At line 97 in file lab1.s
Comment: const1_ used once
2 symbols
360 symbols in table
